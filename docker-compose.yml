services: 
    envoygateway:
        container_name: envoygateway
        image: envoyproxy/envoy-distroless:v1.33.2
        pull_policy: missing
        restart: unless-stopped
        ports:
            - "9901:9901"
            - "10000:10000"
        volumes:
            - ./Envoy/envoy.yaml:/etc/envoy/envoy.yaml
            - ./Envoy/envoy.crt:/etc/ssl/certs/envoy.crt
            - ./Envoy/envoy_key.pem:/etc/ssl/certs/envoy_key.pem
        depends_on:
          - dapr-placement
          - dcservice-dapr
          - marvelservice-dapr

    envoygateway-dapr:
        container_name: envoygateway-dapr
        image: daprio/daprd:1.15.3-mariner-linux-amd64
        network_mode: "service:envoygateway"
        depends_on:
            - envoygateway
        command: ["./daprd",
          "-app-id", "envoygateway",
          "-app-port", "10000",
          "-placement-host-address", "placement:50000"
        ]   
         
    dapr-placement:
        container_name: placement
        image: daprio/placement:1.15.3-mariner-linux-amd64
        pull_policy: missing        
        command: ["./placement", "-port", "50000", "-log-level", "debug"]
        ports:
          - "50000:50000"
         
    webstatus:
        container_name: webstatus
        build:
            context: .
            dockerfile: WebStatus/Dockerfile
        environment:
            - ASPNETCORE_ENVIRONMENT=Production
            - DOTNET_RUNNING_IN_CONTAINER=true
            - HealthChecksUI__HealthChecks__0__Name=DC
            - HealthChecksUI__HealthChecks__0__Uri=http://dcservice:8080/hc
            - HealthChecksUI__HealthChecks__1__Name=Marvel
            - HealthChecksUI__HealthChecks__1__Uri=http://marvelservice:8080/hc
        ports: 
          - "5107:8080"

    dcservice:
        container_name: dc
        restart: unless-stopped
        build: 
            context: .
            dockerfile: DC/Dockerfile
        environment:
            ASPNETCORE_HTTP_PORTS: "8080"
            ASPNETCORE_ENVIRONMENT: "Development"
            DOTNET_RUNNING_IN_CONTAINER : "true"
            DOTNET_SYSTEM_GLOBALIZATION_INVARIANT : "1"
            Serilog__LokiUrl : "http://loki:3100"
            #Serilog__SeqUrl : "http://seq:5431"            
        volumes:
             - ${APPDATA}\microsoft\UserSecrets\:/root/.microsoft/usersecrets
             - ${USERPROFILE}\.aspnet\https:/root/.aspnet/https/

    dcservice-dapr:
        container_name: dcservice-dapr
        image: daprio/daprd:1.15.3-mariner-linux-amd64
        pull_policy: missing        
        network_mode: "service:dcservice"
        depends_on:
            - dcservice
        command: ["./daprd",
          "-app-id", "dcservice",
          "-app-port", "8080",
          "-placement-host-address", "placement:50000"
        ]      
      
    marvelservice:
        container_name: marvel
        restart: unless-stopped
        build: 
            context: .
            dockerfile: Marvel/Dockerfile
        environment:
            ASPNETCORE_HTTP_PORTS: "8080"
            ASPNETCORE_ENVIRONMENT: "Development"
            DOTNET_RUNNING_IN_CONTAINER : "true"
            DOTNET_SYSTEM_GLOBALIZATION_INVARIANT : "1"
            Serilog__LokiUrl : "http://loki:3100"
            #Serilog__SeqUrl : "http://seq:5431"
        volumes:
             - ${APPDATA}\microsoft\UserSecrets\:/root/.microsoft/usersecrets
             - ${USERPROFILE}\.aspnet\https:/root/.aspnet/https/

    marvelservice-dapr:
        container_name: marvelservice-dapr
        image: daprio/daprd:1.15.3-mariner-linux-amd64
        pull_policy: missing        
        network_mode: "service:marvelservice"
        depends_on:
            - marvelservice
        command: ["./daprd",
          "-app-id", "marvelservice",
          "-app-port", "8080",
          "-placement-host-address", "placement:50000"
        ]
    
    #seq:
    #    container_name: seq
    #    image: datalust/seq:latest
    #    ports:
    #        - "5341:80"
    #    environment:
    #        - ACCEPT_EULA=Y

    loki:
        container_name: loki
        image: grafana/loki:3.4.3-amd64
        ports:
            - "3100:3100"
        volumes:
            - ./loki/loki-config.yaml:/etc/loki/loki-config.yaml
        command: -config.file=/etc/loki/loki-config.yaml

    grafana:
        container_name: grafana
        image: grafana/grafana:11.6.0
        environment:
            - GF_AUTH_ANONYMOUS_ENABLED=true
            - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
            - GF_AUTH_DISABLE_LOGIN_FORM=true
        volumes:
            - ./loki/ds.yaml:/etc/grafana/provisioning/datasources/datasources.yml
        ports:
            - "3000:3000"

    prometheus:
        container_name: prometheus
        image: prom/prometheus:v3.2.1
        ports:
            - "9090:9090"
        volumes:
            - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
        command:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus'
            - '--web.console.libraries=/usr/share/prometheus/console_libraries'
            - '--web.console.templates=/usr/share/prometheus/consoles'